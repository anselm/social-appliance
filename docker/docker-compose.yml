version: "3.9"

services:
  app:
    build:
      context: ..
      dockerfile: docker/Dockerfile
    image: social-appliance:latest
    env_file:
      - .env
    environment:
      - PORT=3000
      - NODE_ENV=production
    ports:
      - "3000:3000"
    depends_on:
      mongo:
        condition: service_healthy
      mongo-init:
        condition: service_completed_successfully
    healthcheck:
      test: ["CMD-SHELL", "wget --no-verbose --tries=1 --spider http://localhost:3000/api/health || exit 1"]
      interval: 15s
      timeout: 3s
      retries: 10
      start_period: 20s
    networks:
      - webnet
      - backend
    restart: unless-stopped

  mongo:
    image: mongo:7
    command: ["--replSet", "rs0", "--bind_ip_all"]
    volumes:
      - mongodata:/data/db
    healthcheck:
      test: ["CMD-SHELL", "mongosh --quiet --eval 'db.adminCommand({ping:1})' || exit 1"]
      interval: 10s
      timeout: 3s
      retries: 30
      start_period: 20s
    networks:
      - backend
    restart: unless-stopped

  mongo-init:
    image: mongo:7
    depends_on:
      mongo:
        condition: service_healthy
    entrypoint: ["/bin/sh", "-c"]
    command: >
      "mongosh --host mongo --eval '
        try {
          rs.status();
          print(\"Replica set already initialized\");
        } catch(e) {
          rs.initiate({
            _id: \"rs0\",
            members: [{_id: 0, host: \"mongo:27017\"}]
          });
          print(\"Replica set initialized\");
        }
      '"
    networks:
      - backend

  caddy:
    image: caddy:2
    depends_on:
      app:
        condition: service_healthy
    ports:
      - "80:80"
      - "443:443"
      - "443:443/udp"
    volumes:
      - ./Caddyfile:/etc/caddy/Caddyfile:ro
      - caddydata:/data
      - caddyconfig:/config
    networks:
      - webnet
    restart: unless-stopped

volumes:
  mongodata:
  caddydata:
  caddyconfig:

networks:
  webnet:
  backend:
